/* This file is a patch to Magento entrypoint PHP file -> /app/pub/index.php
   The purpose of this patch is updating the base_url which is stored in Magento core_config_data table
   based on the HTTP_HOST received in the request and this way provide an access from any hostname.

   Its worth to remember that in order to PHP receive this request, all the way since the client up to
   webserver (Domain, Proxy and/or CDN) should be well-configured. */

use \Magento\Framework\App\ObjectManager;
use \Psr\Log\LoggerInterface;

# Get current base_url
$objectManager = $bootstrap->getObjectManager();
$logger = $objectManager->get(\Psr\Log\LoggerInterface::class);

$coreSession = $objectManager->get('Magento\Framework\App\Config\ScopeConfigInterface');

# Build the config keys
$urlKey = "web/%s/base_url";
$baseUrlKey = sprintf($urlKey, "unsecure");
$secureUrlKey = sprintf($urlKey, "secure");

# Get current values
$baseUrl = $coreSession->getValue(sprintf($urlKey, "unsecure"));
$secureUrl = $coreSession->getValue(sprintf($urlKey, "secure"));

# Rewrite it
$newBaseUrl = sprintf("http://%s/", $_SERVER["HTTP_HOST"]);
$newSecureUrl = sprintf("https://%s/", $_SERVER["HTTP_HOST"]);

# If value has changed
if ($baseUrl != $newBaseUrl) {
        $connection = $objectManager->create('\Magento\Framework\App\ResourceConnection');
        $conn = $connection->getConnection();

        # Updates Base Url
        $query = sprintf("update core_config_data set value = '%s' where path = '%s'", $newBaseUrl, $baseUrlKey);
        $conn->query($query);

        # Updates Secure Url
        $query = sprintf("update core_config_data set value = '%s' where path = '%s'", $newSecureUrl, $secureUrlKey);
        $conn->query($query);

        # Clean Cache
        try {
                $_cacheTypeList = $objectManager->create('Magento\Framework\App\Cache\TypeListInterface');
                $_cacheFrontendPool = $objectManager->create('Magento\Framework\App\Cache\Frontend\Pool');
                $types = array(
                        'config','layout','block_html','collections','reflection','db_ddl',
                        'eav','config_integration','config_integration_api','full_page',
                        'translate','config_webservice');
                foreach ($types as $type) {
                        $_cacheTypeList->cleanType($type);
                }
                foreach ($_cacheFrontendPool as $cacheFrontend) {
                        $cacheFrontend->getBackend()->clean();
                }
        } catch (Exception $e){
                $logger->error("Error cleaning the cache:");
                $logger->error($e->getMessage());
        }
}
